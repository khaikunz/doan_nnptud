const Order = require("../models/order");
const Auth = require("../models/auth.js");
const Product = require("../models/product");

// üõí T·∫°o ƒë∆°n h√†ng m·ªõi
exports.createOrder = async (req, res) => {
  try {
    const { orderId, products, total } = req.body;

    if (!products || products.length === 0) {
      return res.status(400).json({ message: "Danh s√°ch s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    // ‚úÖ t·∫°o order m·ªõi
    const newOrder = await Order.create({
      orderId: orderId || 'ORD' + Date.now(),
      userId: req.body.userId, // d√πng userId String
      products,
      total,
    });

    res.status(201).json({
      message: "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng",
      order: newOrder,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói khi t·∫°o ƒë∆°n h√†ng", error: error.message });
  }
};

// üì¶ L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
exports.getAllOrders = async (req, res) => {
  try {
    let filter = { isDeleted: false };

    if (req.user.role !== "admin") {
      filter.userId = req.user.userId; // d√πng userId String
    }

    const orders = await Order.find(filter);

    // L·∫•y th√¥ng tin user + product th·ªß c√¥ng
    const ordersWithDetails = await Promise.all(
      orders.map(async order => {
        const user = await Auth.findOne({ userId: order.userId }, "username role");
        const products = await Product.find({
          productId: { $in: order.products.map(p => p.productId) }
        }, "name price");

        // map quantity v√†o s·∫£n ph·∫©m
        const productsWithQuantity = order.products.map(p => {
          const productInfo = products.find(prod => prod.productId === p.productId);
          return {
            ...productInfo?._doc,
            quantity: p.quantity
          };
        });

        return {
          ...order._doc,
          user,
          products: productsWithQuantity
        };
      })
    );

    res.status(200).json(ordersWithDetails);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng", error: error.message });
  }
};

// üîç L·∫•y ƒë∆°n h√†ng theo orderId
exports.getOrderById = async (req, res) => {
  try {
    const order = await Order.findOne({ orderId: req.params.id, isDeleted: false });

    if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    if (req.user.role !== "admin" && order.userId !== req.user.userId) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n h√†ng n√†y" });
    }

    // L·∫•y user + products
    const user = await Auth.findOne({ userId: order.userId }, "username role");
    const products = await Product.find({
      productId: { $in: order.products.map(p => p.productId) }
    }, "name price");

    const productsWithQuantity = order.products.map(p => {
      const productInfo = products.find(prod => prod.productId === p.productId);
      return {
        ...productInfo?._doc,
        quantity: p.quantity
      };
    });

    res.status(200).json({
      ...order._doc,
      user,
      products: productsWithQuantity
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y ƒë∆°n h√†ng", error: error.message });
  }
};

// üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (ch·ªâ admin)
exports.updateOrderStatus = async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "Ch·ªâ admin m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i" });
    }

    const { status } = req.body;
    const order = await Order.findOneAndUpdate(
      { orderId: req.params.id },
      { status },
      { new: true }
    );

    if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    res.status(200).json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng", order });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i", error: error.message });
  }
};


