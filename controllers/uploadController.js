const Upload = require("../models/upload.js");
const path = require("path");

// üì§ T·∫°o m·ªõi upload (upload file)
exports.uploadFile = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: "Vui l√≤ng ch·ªçn file ƒë·ªÉ upload" });
    }

    const newUpload = new Upload({
      filePath: req.file.path,
      fileType: req.file.mimetype,
      uploadedBy: req.user.id, // l·∫•y t·ª´ token
    });

    await newUpload.save();
    res.status(201).json({ message: "Upload file th√†nh c√¥ng", upload: newUpload });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi upload file", error });
  }
};

// üìÇ L·∫•y t·∫•t c·∫£ file (Admin th·∫•y t·∫•t c·∫£, user ch·ªâ th·∫•y c·ªßa m√¨nh)
exports.getAllUploads = async (req, res) => {
  try {
    let uploads;
    if (req.user.role === "admin") {
      uploads = await Upload.find({ isDeleted: false }).populate("uploadedBy", "username role");
    } else {
      uploads = await Upload.find({ uploadedBy: req.user.id, isDeleted: false });
    }
    res.status(200).json(uploads);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch file", error });
  }
};

// üîç L·∫•y file theo ID
exports.getUploadById = async (req, res) => {
  try {
    const upload = await Upload.findOne({ _id: req.params.id, isDeleted: false }).populate("uploadedBy", "username role");
    if (!upload) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y file" });

    // user ch·ªâ ƒë∆∞·ª£c xem file c·ªßa ch√≠nh m√¨nh (tr·ª´ admin)
    if (req.user.role !== "admin" && upload.uploadedBy._id.toString() !== req.user.id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem file n√†y" });
    }

    res.status(200).json(upload);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y file", error });
  }
};

// üóëÔ∏è X√≥a m·ªÅm file
exports.softDeleteUpload = async (req, res) => {
  try {
    const upload = await Upload.findById(req.params.id);
    if (!upload) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y file" });

    // ch·ªâ cho ph√©p admin ho·∫∑c ng∆∞·ªùi upload x√≥a
    if (req.user.role !== "admin" && upload.uploadedBy.toString() !== req.user.id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a file n√†y" });
    }

    upload.isDeleted = true;
    await upload.save();

    res.status(200).json({ message: "X√≥a m·ªÅm file th√†nh c√¥ng", upload });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a file", error });
  }
};

// üîÅ Kh√¥i ph·ª•c file (ch·ªâ admin)
exports.restoreUpload = async (req, res) => {
  try {
    const upload = await Upload.findByIdAndUpdate(
      req.params.id,
      { isDeleted: false },
      { new: true }
    );
    if (!upload) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y file ƒë·ªÉ kh√¥i ph·ª•c" });
    res.status(200).json({ message: "Kh√¥i ph·ª•c file th√†nh c√¥ng", upload });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi kh√¥i ph·ª•c file", error });
  }
};
