const Cart = require('../models/cart');
const Product = require('../models/product');

// üü¢ T·∫°o gi·ªè h√†ng m·ªõi (n·∫øu user ch∆∞a c√≥)
exports.createCart = async (req, res) => {
  try {
    const userId = req.user.id;
    const { products } = req.body; // [{ productId, quantity }]

    if (!products || !products.length) {
      return res.status(400).json({ message: 'Danh s√°ch s·∫£n ph·∫©m tr·ªëng' });
    }

    // Ki·ªÉm tra n·∫øu user ƒë√£ c√≥ gi·ªè h√†ng
    let cart = await Cart.findOne({ userId, isDeleted: false });
    if (cart) {
      return res.status(400).json({ message: 'Ng∆∞·ªùi d√πng ƒë√£ c√≥ gi·ªè h√†ng' });
    }

    // Validate productId t·ªìn t·∫°i v√† t√≠nh t·ªïng ti·ªÅn
    let total = 0;
    for (const item of products) {
      const product = await Product.findOne({ productId: item.productId });
      if (!product) {
        return res.status(400).json({ message: `S·∫£n ph·∫©m ${item.productId} kh√¥ng t·ªìn t·∫°i` });
      }
      total += product.price * item.quantity;
    }

    const newCart = new Cart({ userId, products, total });
    await newCart.save();

    res.status(201).json({ message: 'T·∫°o gi·ªè h√†ng th√†nh c√¥ng', cart: newCart });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi t·∫°o gi·ªè h√†ng', error: error.message });
  }
};

// üîµ L·∫•y gi·ªè h√†ng c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
exports.getMyCart = async (req, res) => {
  try {
    const userId = req.user.id;
    const cart = await Cart.findOne({ userId, isDeleted: false });
    if (!cart) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng' });

    // L·∫•y th√¥ng tin s·∫£n ph·∫©m chi ti·∫øt
    const productsWithInfo = await Promise.all(
      cart.products.map(async item => {
        const product = await Product.findOne({ productId: item.productId });
        return {
          productId: item.productId,
          name: product?.name || null,
          price: product?.price || 0,
          image: product?.image || null,
          quantity: item.quantity
        };
      })
    );

    res.json({ ...cart._doc, products: productsWithInfo });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y gi·ªè h√†ng', error: error.message });
  }
};

// üü° Th√™m ho·∫∑c c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong gi·ªè h√†ng
exports.updateCart = async (req, res) => {
  try {
    const userId = req.user.id;
    const { productId, quantity } = req.body;

    if (!productId || !quantity || quantity <= 0) {
      return res.status(400).json({ message: 'productId v√† quantity h·ª£p l·ªá l√† b·∫Øt bu·ªôc' });
    }

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i
    const product = await Product.findOne({ productId });
    if (!product) {
      return res.status(400).json({ message: `S·∫£n ph·∫©m ${productId} kh√¥ng t·ªìn t·∫°i` });
    }

    let cart = await Cart.findOne({ userId, isDeleted: false });
    if (!cart) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng' });

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m trong gi·ªè
    const existing = cart.products.find(p => p.productId === productId);
    if (existing) {
      existing.quantity += quantity;
    } else {
      cart.products.push({ productId, quantity });
    }

    // T√≠nh l·∫°i t·ªïng ti·ªÅn
    let total = 0;
    for (const item of cart.products) {
      const p = await Product.findOne({ productId: item.productId });
      total += p.price * item.quantity;
    }
    cart.total = total;

    await cart.save();
    res.json({ message: 'C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng', cart });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng', error: error.message });
  }
};

// üóëÔ∏è X√≥a m·ªÅm gi·ªè h√†ng (user ho·∫∑c admin)
exports.softDeleteCart = async (req, res) => {
  try {
    const userId = req.user.id;

    // admin c√≥ th·ªÉ x√≥a nhi·ªÅu c√°ch, nh∆∞ng endpoint hi·ªán t·∫°i d√πng token user -> x√≥a gi·ªè c·ªßa ch√≠nh user
    const cart = await Cart.findOneAndUpdate({ userId, isDeleted: false }, { isDeleted: true }, { new: true });
    if (!cart) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng ƒë·ªÉ x√≥a' });

    res.json({ message: 'X√≥a gi·ªè h√†ng th√†nh c√¥ng (soft delete)', cart });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi x√≥a gi·ªè h√†ng', error: error.message });
  }
};



