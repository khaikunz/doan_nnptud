const Category = require('../models/category');
const Product = require('../models/product');

// üü¢ T·∫°o m·ªõi category (Admin)
exports.createCategory = async (req, res) => {
  try {
    const { categoryId, name, description } = req.body;

    // Ki·ªÉm tra tr√πng ID
    const existing = await Category.findOne({ categoryId });
    if (existing) {
      return res.status(400).json({ message: "categoryId ƒë√£ t·ªìn t·∫°i!" });
    }

    const category = new Category({ categoryId, name, description });
    await category.save();

    res.status(201).json({ message: 'Th√™m danh m·ª•c th√†nh c√¥ng', category });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi th√™m danh m·ª•c', error });
  }
};

// üîµ L·∫•y t·∫•t c·∫£ danh m·ª•c (kh√¥ng l·∫•y danh m·ª•c ƒë√£ x√≥a) k√®m products
exports.getAllCategories = async (req, res) => {
  try {
    const categories = await Category.find({ isDeleted: false });

    // Th√™m m·∫£ng products cho m·ªói category
    const categoriesWithProducts = await Promise.all(
      categories.map(async (cat) => {
        const products = await Product.find({ categoryId: cat.categoryId, isDeleted: false });
        return { ...cat._doc, products };
      })
    );

    res.json(categoriesWithProducts);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch danh m·ª•c', error });
  }
};

// üü† L·∫•y danh m·ª•c theo categoryId k√®m products
exports.getCategoryById = async (req, res) => {
  try {
    const { id } = req.params;
    const category = await Category.findOne({ categoryId: id, isDeleted: false });
    if (!category) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c' });

    const products = await Product.find({ categoryId: category.categoryId, isDeleted: false });
    res.json({ ...category._doc, products });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh m·ª•c', error });
  }
};


// üî¥ X√≥a m·ªÅm danh m·ª•c (Admin)
exports.softDeleteCategory = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await Category.findOneAndUpdate(
      { categoryId: id },
      { isDeleted: true },
      { new: true }
    );

    if (!deleted) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c' });
    res.json({ message: 'X√≥a danh m·ª•c th√†nh c√¥ng (soft delete)', category: deleted });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi x√≥a danh m·ª•c', error });
  }
};


