const Product = require("../models/product");
const Category = require("../models/category");

// üì¶ [GET] /api/products - L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (ch∆∞a b·ªã x√≥a)
exports.getAllProducts = async (req, res) => {
  try {
    const products = await Product.find({ isDeleted: false });

    // Th√™m categoryName cho m·ªói s·∫£n ph·∫©m
    const productsWithCategory = await Promise.all(
      products.map(async (p) => {
        const category = await Category.findOne({ categoryId: p.categoryId });
        return { ...p._doc, categoryName: category ? category.name : null };
      })
    );

    res.status(200).json(productsWithCategory);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m", error: error.message });
  }
};

// üîç [GET] /api/products/:id - L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo productId
exports.getProductById = async (req, res) => {
  try {
    const product = await Product.findOne({ productId: req.params.id, isDeleted: false });
    if (!product) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

    const category = await Category.findOne({ categoryId: product.categoryId });
    res.status(200).json({ ...product._doc, categoryName: category ? category.name : null });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y s·∫£n ph·∫©m", error: error.message });
  }
};

// ‚ûï [POST] /api/products - T·∫°o m·ªõi s·∫£n ph·∫©m
exports.createProduct = async (req, res) => {
  try {
    const { productId, name, price, categoryId } = req.body;

    // Ki·ªÉm tra tr√πng ID
    const existing = await Product.findOne({ productId });
    if (existing) return res.status(400).json({ message: "M√£ s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i" });

    // L·∫•y ·∫£nh n·∫øu c√≥ upload
    let imagePath = "";
    if (req.file) imagePath = req.file.filename;

    const newProduct = new Product({
      productId,
      name,
      price,
      categoryId,
      image: imagePath,
    });

    await newProduct.save();

    res.status(201).json({
      message: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng",
      product: newProduct,
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi t·∫°o s·∫£n ph·∫©m", error: error.message });
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m (ch·ªâ admin) - h·ªó tr·ª£ thay ƒë·ªïi ·∫£nh
exports.updateProduct = async (req, res) => {
  try {
    const { name, price, categoryId } = req.body;

    const updateData = {};
    if (name) updateData.name = name;
    if (price) updateData.price = price;
    if (categoryId) updateData.categoryId = categoryId;
    if (req.file) updateData.image = req.file.filename;

    const product = await Product.findOneAndUpdate(
      { productId: req.params.id },
      updateData,
      { new: true }
    );

    if (!product) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t" });

    res.status(200).json({ message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng", product });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m", error: error.message });
  }
};


// üóëÔ∏è [DELETE] /api/products/:id - X√≥a m·ªÅm s·∫£n ph·∫©m
exports.softDeleteProduct = async (req, res) => {
  try {
    const product = await Product.findOneAndUpdate(
      { productId: req.params.id },
      { isDeleted: true },
      { new: true }
    );

    if (!product) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a" });
    res.status(200).json({ message: "X√≥a m·ªÅm s·∫£n ph·∫©m th√†nh c√¥ng", product });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a s·∫£n ph·∫©m", error: error.message });
  }
};

